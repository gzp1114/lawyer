package com.lawyer.tools;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
/**
 * 注意mysql中   数据库编码集     表的编码集   字段的编码集
 * @author Administrator
 *
 */
public class MySQL {
	public MySQL() {
	}
	//备份数据库
	public static void backup() throws IOException {
		try {
			Runtime rt = Runtime.getRuntime();
			// 调用mysql的cmd 设置导出编码为 utf8 这里必须是utf8
			Process child = rt
					.exec("mysqldump -uroot -proot lawyer --set-charset=utf8");
			// 把进程执行中的控制台输出信息写入.sql文件，即生成了备注文件。
			// 注：如果不对控制台信息进行读出，则会导致进程堵塞 无法运行
			InputStream in = child.getInputStream();// 控制台的输出信息作为输入流
			// 设置输出流流编码为utf8
			InputStreamReader xx = new InputStreamReader(in, "utf8");
			String inStr;
			StringBuffer sb = new StringBuffer("");
			String outStr;
			// 组合控制台输出信息字符串
			BufferedReader br = new BufferedReader(xx);
			while ((inStr = br.readLine()) != null) {
				sb.append(inStr + "\r\n");
			}
			outStr = sb.toString();
			System.out.println(outStr + " ==");
			// 要用来做导入用的sql目标文件
			FileOutputStream fout = new FileOutputStream("d:/test.sql");
			//必要的编码集  必须写
			OutputStreamWriter writer = new OutputStreamWriter(fout,"utf8");
			writer.write(outStr);
			// 注：这里如果用缓冲方式写入文件的话，会导致中文乱码，用flush()方法则可以避免
			writer.flush();
			// 别忘记关闭输入输出流
			in.close();
			xx.close();
			br.close();
			writer.close();
			fout.close();
			System.out.println("");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	//还原数据库
	public static  void load() {
		try {
			String fPath = "d:/test.sql";
			Runtime rt = Runtime.getRuntime();
			// 调用 mysql 的 cmd:
			Process child = rt.exec("mysql -uroot -proot lawyer");
			OutputStream out = child.getOutputStream();
			// 控制台的输入信息作为输出流
			String inStr;
			StringBuffer sb = new StringBuffer("");
			String outStr;
			BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(fPath), "utf8"));
			while ((inStr = br.readLine()) != null) {
				sb.append(inStr + "\r\n");
			}
			outStr = sb.toString();
			OutputStreamWriter writer = new OutputStreamWriter(out, "utf8");
			writer.write(outStr);
			// 注：这里如果用缓冲方式写入文件的话，会导致中文乱码，用flush()方法则可以避免
			writer.flush();
			// 别忘记关闭输入输出流
			out.close();
			br.close();
			writer.close();
			System.out.println("");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) throws IOException {
//		 MySQL.backup();
//		 my.load();

	}
}
